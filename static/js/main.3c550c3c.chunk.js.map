{"version":3,"sources":["arnold.jpg","components/MovieCard.js","components/SearchMovies.js","components/App.js","components/NavBar.js","serviceWorker.js","index.js"],"names":["module","exports","MovieCard","m","className","key","id","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","console","log","url","fetch","res","json","data","results","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","App","logo","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","ButtonAppBar","classes","AppBar","style","background","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","textAlign","role","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3c550c3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arnold.ee2a0d53.jpg\";","import React from \"react\";\r\n\r\n/* Basic functional componet that: Should return all the following information:\r\nmovie poster img link path\r\ntitle\r\nrelease date\r\nAverage vote score.\r\ndesc */\r\nexport default function MovieCard({m}) {\r\n    //const m = props.m; \r\n   // const {m} = props; //use destructuring\r\n    return (\r\n<div className=\"card center\" key={m.id} >\r\n     <img className =\"card--image\"\r\n         src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${m.poster_path}`}\r\n         alt={'\\n'+ '❌ unable to load' + m.title + \"'s poster\" + '\\n'} \r\n         />\r\n <div className=\"card--content\">\r\n <h3 className=\"card--title\">{m.title}</h3>\r\n <p><small>Release Date: {m.release_date}</small></p>\r\n <p><small>Rating: {m.vote_average}</small></p>\r\n <p className=\"card--desc\">{m.overview}</p>\r\n </div>\r\n</div>\r\n )\r\n}","import React, {useState} from \"react\";\nimport MovieCard from \"./MovieCard.js\";\n\nexport default function SearchMovies(){\n    \n\n    //states for input query and movies to be displayed from search\n        //State is managed with React useState Hook.\n\n    //Query state\n    const [query, setQuery] = useState('');\n\n    //Movies result state\n    const[movies,setMovies] = useState([]);\n\n    const searchMovies = async (e) => {\n        e.preventDefault();\n        console.log(\"submitting\");\n        \n        //Add your TMDB api key here\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=f84469b32572db997cc3c78f8dc5a2f1&language=en-US&query=${query}&page=1&include_adult=false`;\n        \n        try {\n            const res = await fetch(url);\n            const data  = await res.json();\n            setMovies(data.results);\n        }catch(err){\n            console.error(err);\n\n        }\n    }\n    \n    return (\n        <>\n        {/* form for Search bar and search button*/}\n        <form className=\"form\" onSubmit={searchMovies}>\n            <label className=\"label\" htmlFor=\"query\">Movie Name</label>\n            <input className=\"input\" type=\"text\" name=\"query\"\n                placeholder=\" Enter movie to search for (i.e. Total Recall)\"\n                value={query} onChange={(e) => setQuery(e.target.value)}\n                />\n            <button className=\"button\" type=\"submit\">Search</button>\n        </form>\n        <br />\n        {/* Display list  all of the information from  */}\n            <div className=\"card-list \">\n                {movies.filter(m => m.poster_path).map(m => (\n                    <MovieCard m={m} key={m.id} />\n        ))}\n        </div>\n    </>    \n    )\n}","import React from 'react';\nimport logo from '../arnold.jpg';\nimport '../css/AppLogo.css';\nfunction App() {\n\n  //TODO:  refactor app name (either logo) or to a upper navbar and header\n  //TODO: explore the TMDB App more for information on actors/actresses\n  //TODO: Look into ways to sort movies by country and nationality.\n  return (\n\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n       {/*  <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <div className = \"appbar\" >\r\n    <div className={classes.root}>\r\n      <AppBar style={{ background: '#650793' }} position=\"fixed\">  \r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Movie Buff\r\n          </Typography>\r\n          <Button color=\"inherit\">About</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SearchMovies from \"./components/SearchMovies\";\nimport './css/style.css';\nimport './css/normalize.css';\n\n//import './index.css';\nimport App from './components/App';\nimport NavBar from './components/NavBar';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <NavBar/>\n <div className=\"container\">\n        <App/>\n        <h3 className=\"title\" style={{textAlign: \"center\"}}> Put that cookie down</h3>\n        <h1 className=\"title\"><span role=\"img\" aria-label=\"popcorn\"> 🍿 </span>Movie Buff <span role=\"img\" aria-label=\"popcorn\"> 🍿</span> </h1>\n    <SearchMovies/>\n</div>\n<div className=\"container\"></div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}